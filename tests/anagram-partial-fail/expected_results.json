{
  "tests": [
    {
      "test_code": "    h.assert_array_eq[String](empty, Anagram(\"bobs\", anagrams))",
      "status": "pass",
      "name": "    // Anagram should return an empty array if there are no anagrams"
    },
    {
      "test_code": "    h.assert_array_eq[String](empty, Anagram(\"banana\", anagrams))",
      "status": "pass",
      "name": "    // Anagram should ignore same words, those aren't anagrams"
    },
    {
      "test_code": "    h.assert_array_eq[String](empty, Anagram(\"last\", [\"mass\"]))",
      "status": "pass",
      "name": "    // Anagram shouldn't be based on checksum"
    },
    {
      "test_code": "    h.assert_array_eq[String]([\"Sent\"], Anagram(\"nets\", anagrams))",
      "message": " Assert EQ failed.  Expected ([len=1: Sent]) == ([len=1: sent])",
      "status": "fail",
      "version": 2,
      "name": "    // Anagram should return an array of anagrams if present"
    },
    {
      "test_code": "    h.assert_array_eq[String]([\"sent\"], Anagram(\"nETs\", anagrams))",
      "status": "pass",
      "name": "    // Anagram should be case insensitive"
    },
    {
      "test_code": "    h.assert_array_eq[String]([\"sale\"; \"ales\"], Anagram(\"seal\", anagrams))",
      "status": "pass",
      "name": "    // Anagram should return multiple anagrams"
    }
  ],
  "status": "fail",
  "version": 2
}
